Index: app/src/main/java/com/example/librecord/InfoActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.librecord;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.app.Dialog;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.*;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.Calendar;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\npublic class InfoActivity extends AppCompatActivity {\r\n    TextView title, author, year, category, publisher, isbn, language;\r\n    ImageView book;\r\n    Button reserve;\r\n    ImageButton bookmarkButton;\r\n    private String user_id;\r\n    DatePickerDialog datePickerDialog;\r\n    Calendar calendar;\r\n    Connect connection;\r\n    Connection conn;\r\n    String username;\r\n\r\n    private String userId, name, email, checkerErr = \"good\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_info);\r\n        connection = new Connect();\r\n\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"userDetails\", MODE_PRIVATE);\r\n        userId = sharedPreferences.getString(\"userId\", \"\");\r\n        email = sharedPreferences.getString(\"email\", \"\");\r\n        name = sharedPreferences.getString(\"name\", \"\");\r\n\r\n        user_id = userId;\r\n\r\n        book = findViewById(R.id.bookimage);\r\n        title = findViewById(R.id.title);\r\n        author = findViewById(R.id.author);\r\n        year = findViewById(R.id.year);\r\n        category = findViewById(R.id.category);\r\n        publisher = findViewById(R.id.publisher);\r\n        isbn = findViewById(R.id.isbn);\r\n        language = findViewById(R.id.language);\r\n        reserve = findViewById(R.id.reserve);\r\n        bookmarkButton = findViewById(R.id.bookmark);\r\n\r\n        int[] bookImages = {\r\n                R.drawable.histo1, R.drawable.histo2, R.drawable.prog3, R.drawable.calcu4, R.drawable.histo5,\r\n                R.drawable.histo6, R.drawable.histo7, R.drawable.histo8, R.drawable.histo9, R.drawable.histo10,\r\n                R.drawable.histo11, R.drawable.calcu12, R.drawable.calcu13, R.drawable.calcu14, R.drawable.calcu15,\r\n                R.drawable.calcu16, R.drawable.sci17, R.drawable.sci18, R.drawable.sci19, R.drawable.sci20,\r\n                R.drawable.sci22, R.drawable.prog23, R.drawable.prog24, R.drawable.prog25, R.drawable.prog26,\r\n                R.drawable.prog27\r\n        };\r\n\r\n        Intent intent = getIntent();\r\n        book.setImageResource(bookImages[intent.getIntExtra(\"id\", 0)]);\r\n\r\n        String bookTitle = intent.getStringExtra(\"bookTitle\");\r\n        Log.d(\"InfoActivity\", \"bookTitle \" + bookTitle);\r\n\r\n        ExecutorService executorService1 = Executors.newSingleThreadExecutor();\r\n        executorService1.execute(() -> {\r\n            String query = \"SELECT * FROM books WHERE BookName = ?\";\r\n            try (Connection conn = Connect.CONN();\r\n                 PreparedStatement preparedStatement = conn.prepareStatement(query)) {\r\n\r\n                if (bookTitle == null) {\r\n                    Log.e(\"InfoActivity\", \"Book title is null\");\r\n                    return;\r\n                }\r\n\r\n                preparedStatement.setString(1, bookTitle);\r\n                try (ResultSet rs = preparedStatement.executeQuery()) {\r\n                    if (rs.next()) {\r\n                        String rsbookName = rs.getString(\"BookName\");\r\n                        String rsauthorName = rs.getString(\"AuthorName\");\r\n                        String rsyear = rs.getString(\"Year\");\r\n                        String rscategory = rs.getString(\"Category\");\r\n                        String rspublisher = rs.getString(\"Publisher\");\r\n                        String rsisbn = rs.getString(\"ISBN\");\r\n                        String rslanguage = rs.getString(\"Language\");\r\n\r\n                        Log.d(\"InfoActivity\", \"Author: \" + rsauthorName);\r\n\r\n                        runOnUiThread(() -> {\r\n                            title.setText(rsbookName);\r\n                            author.setText(rsauthorName);\r\n                            year.setText(rsyear);\r\n                            category.setText(rscategory);\r\n                            publisher.setText(rspublisher);\r\n                            isbn.setText(rsisbn);\r\n                            language.setText(rslanguage);\r\n                        });\r\n                    }\r\n                }\r\n            } catch (SQLException e) {\r\n                Log.e(\"InfoActivity\", \"Database error: \", e);\r\n            } finally {\r\n                executorService1.shutdown();\r\n            }\r\n        });\r\n\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        executorService.execute(() -> {\r\n            try {\r\n                conn = connection.CONN();\r\n                String query = \"SELECT * FROM accountdata WHERE id = \" + user_id;\r\n                PreparedStatement preparedStatement = conn.prepareStatement(query);\r\n                ResultSet rs = preparedStatement.executeQuery();\r\n\r\n                if (rs.next()) {\r\n                    username = rs.getString(\"username\");\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n        Log.d(\"InfoActivity\", \"username \" + username);\r\n\r\n        reserve.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showCustomDatePickerDialog(intent);\r\n            }\r\n        });\r\n\r\n        bookmarkButton.setOnClickListener(this::onBookmarkClick);\r\n    }\r\n\r\n    private void showCustomDatePickerDialog(Intent intent) {\r\n        Dialog dialog = new Dialog(this);\r\n        dialog.setContentView(R.layout.dialog_date_picker);\r\n\r\n        DatePicker datePicker = dialog.findViewById(R.id.datePicker);\r\n        Button confirmButton = dialog.findViewById(R.id.confirmButton);\r\n        Button cancelButton = dialog.findViewById(R.id.cancelButton);\r\n\r\n        confirmButton.setOnClickListener(v -> {\r\n            int day = datePicker.getDayOfMonth();\r\n            int month = datePicker.getMonth();\r\n            int year = datePicker.getYear();\r\n\r\n            try {\r\n                Toast.makeText(InfoActivity.this, \"Please Wait\", Toast.LENGTH_SHORT).show();\r\n                Thread.sleep(3000);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            String bookTitle = title.getText().toString();\r\n            if(checkReservation()){\r\n                processReservation(username, bookTitle, year, month, day);\r\n            }else{\r\n                Toast.makeText(this, \"Please Return a book first to make a reservation\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n\r\n            // Wait for the reservation process to complete before proceeding\r\n            Executors.newSingleThreadExecutor().execute(() -> {\r\n                try {\r\n                    Thread.sleep(3000); // Adjust the sleep time as needed for the reservation process to complete\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                runOnUiThread(() -> {\r\n                    if (checkerErr.equals(\"good\")) {\r\n                        Intent reserveActivity = new Intent(InfoActivity.this, ReservationCompleteActivity.class);\r\n                        startActivity(reserveActivity);\r\n                    } else {\r\n                        Toast.makeText(this, \"Please Select Other Date\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n\r\n                    dialog.dismiss();\r\n                });\r\n            });\r\n        });\r\n\r\n        cancelButton.setOnClickListener(v -> dialog.dismiss());\r\n        dialog.show();\r\n    }\r\n\r\n    public boolean checkReservation() {\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        Future<Boolean> future = executorService.submit(new Callable<Boolean>() {\r\n            @Override\r\n            public Boolean call() {\r\n                try {\r\n                    conn = connection.CONN();\r\n                    String query = \"SELECT COUNT(*) as count FROM reservationrecord WHERE status = 'reserve'\";\r\n                    PreparedStatement preparedStatement = conn.prepareStatement(query);\r\n                    ResultSet rs = preparedStatement.executeQuery();\r\n                    if (rs.next()) {\r\n                        int count = rs.getInt(\"count\");\r\n                        return count < 3;\r\n                    }\r\n                } catch (SQLException e) {\r\n                    Log.d(\"Connection Error\", \"error\", e);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        try {\r\n            return future.get();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        } finally {\r\n            executorService.shutdown();\r\n        }\r\n    }\r\n\r\n    public void processReservation(String name, String bookTitle, int year, int month, int day) {\r\n        String date = day + \",\" + month + \",\" + year;\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        executorService.execute(() -> {\r\n            try {\r\n                conn = connection.CONN();\r\n                String query = \"INSERT INTO reservationrecord (username, title, date) VALUES (?, ?, STR_TO_DATE(?, '%d,%m,%Y'))\";\r\n                try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {\r\n                    preparedStatement.setString(1, name);\r\n                    preparedStatement.setString(2, bookTitle);\r\n                    preparedStatement.setString(3, date);\r\n                    preparedStatement.execute();\r\n                    checkerErr = \"good\";\r\n                }\r\n            } catch (SQLException e) {\r\n                checkerErr = \"error\";\r\n                Log.d(\"Connection Error\", \"error\", e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void onBookmarkClick(View view) {\r\n        saveBookmark();\r\n        openBookmarkFragment();\r\n    }\r\n\r\n    private void saveBookmark() {\r\n        String bookTitle = title.getText().toString();\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        executorService.execute(() -> {\r\n            try {\r\n                MySQLHelperBookmark.addBookmark(user_id, bookTitle, name);\r\n                runOnUiThread(() -> Toast.makeText(InfoActivity.this, \"Bookmark Saved\", Toast.LENGTH_SHORT).show());\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n                runOnUiThread(() -> Toast.makeText(InfoActivity.this, \"Error Saving Bookmark\", Toast.LENGTH_SHORT).show());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void openBookmarkFragment() {\r\n        BookmarkFragment fragment = new BookmarkFragment();\r\n        FragmentManager fragmentManager = getSupportFragmentManager();\r\n        FragmentTransaction transaction = fragmentManager.beginTransaction();\r\n        transaction.replace(R.id.activityInfo, fragment);\r\n        transaction.addToBackStack(null);\r\n        transaction.commit();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/librecord/InfoActivity.java b/app/src/main/java/com/example/librecord/InfoActivity.java
--- a/app/src/main/java/com/example/librecord/InfoActivity.java	(revision 159321dfee284797aec1b4e282faf8c0a46e93f9)
+++ b/app/src/main/java/com/example/librecord/InfoActivity.java	(date 1717343961456)
@@ -167,12 +167,23 @@
             }
 
             String bookTitle = title.getText().toString();
-            if(checkReservation()){
-                processReservation(username, bookTitle, year, month, day);
-            }else{
-                Toast.makeText(this, "Please Return a book first to make a reservation", Toast.LENGTH_SHORT).show();
+            if(checkBookifAvailable(bookTitle)){
+                if(checkReservation()){
+                    if(checkDateReservation(bookTitle,year, month, day)){
+                        processReservation(username, bookTitle, year, month, day);
+                    }else{
+                        Toast.makeText(this, "Please Select Other Date", Toast.LENGTH_SHORT).show();
+                        return;
+                    }
+                }else{
+                    Toast.makeText(this, "Please Return a book first to make a reservation", Toast.LENGTH_SHORT).show();
+                    return;
+                }
+            }else{
+                Toast.makeText(this, "The book is currently on a reservation", Toast.LENGTH_SHORT).show();
                 return;
             }
+
 
             // Wait for the reservation process to complete before proceeding
             Executors.newSingleThreadExecutor().execute(() -> {
@@ -186,8 +197,6 @@
                     if (checkerErr.equals("good")) {
                         Intent reserveActivity = new Intent(InfoActivity.this, ReservationCompleteActivity.class);
                         startActivity(reserveActivity);
-                    } else {
-                        Toast.makeText(this, "Please Select Other Date", Toast.LENGTH_SHORT).show();
                     }
 
                     dialog.dismiss();
@@ -208,6 +217,7 @@
                     conn = connection.CONN();
                     String query = "SELECT COUNT(*) as count FROM reservationrecord WHERE status = 'reserve'";
                     PreparedStatement preparedStatement = conn.prepareStatement(query);
+
                     ResultSet rs = preparedStatement.executeQuery();
                     if (rs.next()) {
                         int count = rs.getInt("count");
@@ -230,6 +240,89 @@
         }
     }
 
+    public boolean checkDateReservation(String title, int year, int month, int day) {
+        String date = String.format("%04d-%02d-%02d", year, month, day);
+
+        ExecutorService executorService = Executors.newSingleThreadExecutor();
+        Future<Boolean> future = executorService.submit(new Callable<Boolean>() {
+            @Override
+            public Boolean call() {
+                try {
+                    conn = connection.CONN();
+                    String query = "SELECT COUNT(*) as count FROM reservationrecord WHERE title = ? AND date = ?";
+                    PreparedStatement preparedStatement = conn.prepareStatement(query);
+                    preparedStatement.setString(1, title);
+                    preparedStatement.setString(2, date);
+                    ResultSet rs = preparedStatement.executeQuery();
+
+                    // Log the query with parameters
+                    String loggedQuery = String.format("Executing query: SELECT COUNT(*) as count FROM reservationrecord WHERE title = '%s' AND date = '%s'", title, date);
+
+                    Log.d("infoActivity","p:"+loggedQuery);
+                    Log.d("infoActivity","p:"+rs);
+                    if (rs.next()) {
+                        int count = rs.getInt("count");
+                        return count == 0;
+                    }
+                } catch (SQLException e) {
+                    Log.d("Connection Error", "error", e);
+                }
+                return false;
+            }
+        });
+
+        try {
+            return future.get();
+        } catch (InterruptedException | ExecutionException e) {
+            e.printStackTrace();
+            return false;
+        } finally {
+            executorService.shutdown();
+        }
+    }
+
+    public boolean checkBookifAvailable(String title) {
+
+        ExecutorService executorService = Executors.newSingleThreadExecutor();
+        Future<Boolean> future = executorService.submit(new Callable<Boolean>() {
+            @Override
+            public Boolean call() {
+                try {
+                    conn = connection.CONN();
+                    String query = "SELECT COUNT(*) as count FROM reservationrecord WHERE title = ? AND status ='reserve'";
+                    PreparedStatement preparedStatement = conn.prepareStatement(query);
+                    preparedStatement.setString(1, title);
+                    ResultSet rs = preparedStatement.executeQuery();
+
+                    if (rs.next()) {
+                        int count = rs.getInt("count");
+                        if(count==0){
+                            return true;
+                        }else{
+                            return false;
+                        }
+                    }else{
+                        return false;
+                    }
+
+                } catch (SQLException e) {
+                    Log.d("Connection Error", "error", e);
+                }
+                return false;
+            }
+        });
+
+        try {
+            return future.get();
+        } catch (InterruptedException | ExecutionException e) {
+            e.printStackTrace();
+            return false;
+        } finally {
+            executorService.shutdown();
+        }
+    }
+
+
     public void processReservation(String name, String bookTitle, int year, int month, int day) {
         String date = day + "," + month + "," + year;
         ExecutorService executorService = Executors.newSingleThreadExecutor();
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
new file mode 100644
--- /dev/null	(date 1717340637530)
+++ b/.idea/deploymentTargetSelector.xml	(date 1717340637530)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetSelector">
+    <selectionStates>
+      <SelectionState runConfigName="app">
+        <option name="selectionMode" value="DROPDOWN" />
+      </SelectionState>
+    </selectionStates>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"#JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 159321dfee284797aec1b4e282faf8c0a46e93f9)
+++ b/.idea/gradle.xml	(date 1717340637505)
@@ -1,18 +1,18 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
-        <option name="testRunner" value="GRADLE" />
-        <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="#JAVA_HOME" />
+        <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
             <option value="$PROJECT_DIR$/app" />
           </set>
         </option>
+        <option name="resolveExternalAnnotations" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/example/librecord/Connect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.librecord;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport android.util.*;\r\n\r\npublic class Connect {\r\n    protected static String dbname = \"librecord\";\r\n    protected static String ip = \"10.0.2.2\";\r\n    protected static String port = \"3306\";\r\n    protected static String username = \"root\";\r\n//    protected static String password = \"AdminUser1\";\r\n    protected static String password = \"\";\r\n\r\n    public static Connection CONN(){\r\n        Connection conn = null;\r\n        try {\r\n            Class.forName(\"com.mysql.jdbc.Driver\");\r\n            String connString = \"jdbc:mysql://\"+ip+\":\"+port+\"/\"+dbname+\"?useSSL=false\";\r\n            conn = DriverManager.getConnection(connString, username, password);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n            Log.d(\"Error\", e+\"\");\r\n        }\r\n\r\n        return conn;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/librecord/Connect.java b/app/src/main/java/com/example/librecord/Connect.java
--- a/app/src/main/java/com/example/librecord/Connect.java	(revision 159321dfee284797aec1b4e282faf8c0a46e93f9)
+++ b/app/src/main/java/com/example/librecord/Connect.java	(date 1717340637518)
@@ -9,8 +9,8 @@
     protected static String ip = "10.0.2.2";
     protected static String port = "3306";
     protected static String username = "root";
-//    protected static String password = "AdminUser1";
-    protected static String password = "";
+    protected static String password = "AdminUser1";
+//    protected static String password = "";
 
     public static Connection CONN(){
         Connection conn = null;
Index: .idea/migrations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/migrations.xml b/.idea/migrations.xml
new file mode 100644
--- /dev/null	(date 1717340637558)
+++ b/.idea/migrations.xml	(date 1717340637558)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectMigrations">
+    <option name="MigrateToGradleLocalJavaHome">
+      <set>
+        <option value="$PROJECT_DIR$" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1717340637541)
+++ b/.idea/vcs.xml	(date 1717340637541)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"temurin-17\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 159321dfee284797aec1b4e282faf8c0a46e93f9)
+++ b/.idea/misc.xml	(date 1717340637550)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="temurin-17" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
